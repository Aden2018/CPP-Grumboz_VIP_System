Modify Quest Reward rates


/src/server/game/Entities/Creature/GossipDef.cpp

first add:
[CODE]
	#include "Grumboz_VIP_Core.h"
[/CODE]

with the rest of the includes.


find Function:
[CODE]
	void PlayerMenu::SendQuestGiverQuestDetails(Quest const* quest, ObjectGuid npcGUID, bool activateAccept) const
[/CODE]

add at the top:
[CODE]
	float VIP_OFFSET = VIP::GetVIPOFFSET();
	uint32 acctId = _session->GetAccountId();
	uint8 Pvip = VIP::GetPlayerVIP(acctId);
	float MOD = (Pvip * VIP_OFFSET);

	Player* player = _session->GetPlayer();
[/CODE]


then find:
[CODE]
            data << uint32(quest->RewardChoiceItemCount[i]);
[/CODE]

and replace with:
[CODE]
			uint32 Item_Reward_Choice_Count = quest->RewardChoiceItemCount[i];
			uint32 extra_Reward_Choice_Item_Count = Item_Reward_Choice_Count * MOD;

			data << uint32(quest->RewardChoiceItemCount[i] + extra_Reward_Choice_Item_Count);
[/CODE]

then find:
[CODE]
			data << uint32(quest->RewardItemIdCount[i]);
[/CODE]

and replace with:
[CODE]
			uint32 Item_Reward_Count = quest->RewardItemIdCount[i];
			uint32 extra_Item_Reward_Count = Item_Reward_Count * MOD;

			data << uint32(quest->RewardItemIdCount[i] + extra_Item_Reward_Count);
[/CODE]

then find:
[CODE]
[COLOR="#808080"]

		data << uint32(quest->GetRewOrReqMoney());
		data << uint32(quest->XPValue(player)(_session->GetPlayer()) * sWorld->getRate(RATE_XP_QUEST));
[/COLOR]
[/CODE]

and replace with:
[CODE]
		uint32 XP = quest->XPValue(player);
		float xp_rate = sWorld->getRate(RATE_XP_QUEST);
		uint32 MONEY = quest->GetRewOrReqMoney();

		XP = XP + (XP * (xp_rate + (xp_rate * MOD)));
		MONEY = MONEY + (MONEY * MOD);

		data << uint32(MONEY);
		data << uint32(XP);
[/CODE]

[HR][/HR]

find Function:
[CODE]
void PlayerMenu::SendQuestQueryResponse(Quest const* quest) const
[/CODE]

add at the top of the function:
[CODE]
	float VIP_OFFSET = VIP::GetVIPOFFSET();
	uint32 acctId = _session->GetAccountId();
	uint8 Pvip = VIP::GetPlayerVIP(acctId);
	float MOD = (Pvip * VIP_OFFSET);

	Player* player = _session->GetPlayer();
[/CODE]

then find:
[CODE]
[COLOR="#808080"]

    if (quest->HasFlag(QUEST_FLAGS_HIDDEN_REWARDS))
        data << uint32(0);                                  // Hide money rewarded
    else
        data << uint32(quest->GetRewOrReqMoney());          // reward money (below max lvl)
[/COLOR]
[/CODE]

and replace with:
[CODE]
	uint32 MONEY = quest->GetRewOrReqMoney();
	uint32 extra_MONEY = MONEY * MOD;

	if (quest->HasFlag(QUEST_FLAGS_HIDDEN_REWARDS))
		data << uint32(0);                                  // Hide money rewarded
	else
		data << uint32(MONEY + extra_MONEY);				// reward money (below max lvl)
[/CODE]

then find:
[CODE]
			data << uint32(quest->RewardItemIdCount[i]);
[/CODE]

and replace with:
[CODE]
			uint32 Item_Reward_Count = quest->RewardItemIdCount[i];
			uint32 extra_Item_Reward_Count = Item_Reward_Count * MOD;

			data << uint32(quest->RewardItemIdCount[i] + extra_Item_Reward_Count);
[/CODE]

then find:
[CODE]
            data << uint32(quest->RewardChoiceItemCount[i]);
[/CODE]

and replace with:
[CODE]
			uint32 Item_Choice_Reward_Count = quest->RewardItemIdCount[i];
			uint32 extra_Item_Choice_Reward_Count = Item_Choice_Reward_Count * MOD;

			data << uint32(quest->RewardChoiceItemCount[i] + extra_Item_Choice_Reward_Count);
[/CODE]

[HR][/HR]

find function:
[CODE]
void PlayerMenu::SendQuestGiverOfferReward(Quest const* quest, ObjectGuid npcGUID, bool enableNext) const
[/CODE]

add at the top:
[CODE]
	float VIP_OFFSET = VIP::GetVIPOFFSET();
	uint32 acctId = _session->GetAccountId();
	uint8 Pvip = VIP::GetPlayerVIP(acctId);
	float MOD = (Pvip * VIP_OFFSET);

	Player* player = _session->GetPlayer();
[/CODE]

then find:
[CODE]
       data << uint32(quest->RewardChoiceItemCount[i]);
[/CODE]

and replace with:
[CODE]
		uint32 Item_Choice_Reward_Count = quest->RewardItemIdCount[i];
		uint32 extra_Item_Choice_Reward_Count = Item_Choice_Reward_Count * MOD;

		data << uint32(quest->RewardChoiceItemCount[i] + extra_Item_Choice_Reward_Count);
[/CODE]

then find:
[CODE]
        data << uint32(quest->RewardItemIdCount[i]);
[/CODE]

and replace with:
[CODE]
		uint32 Item_Reward_Count = quest->RewardItemIdCount[i];
		uint32 extra_Item_Reward_Count = Item_Reward_Count * MOD;

		data << uint32(quest->RewardItemIdCount[i] + extra_Item_Reward_Count);
[/CODE]

then find:
[CODE]
    data << uint32(quest->GetRewOrReqMoney());
    data << uint32(quest->XPValue(_session->GetPlayer()) * sWorld->getRate(RATE_XP_QUEST));
[/CODE]

and replace with:
[CODE]
	uint32 XP = quest->XPValue(player);
	float xp_rate = sWorld->getRate(RATE_XP_QUEST);
	uint32 MONEY = quest->GetRewOrReqMoney();

	XP = XP + (XP * (xp_rate + (xp_rate * MOD)));
	MONEY = MONEY + (MONEY * MOD);

	data << uint32(MONEY);
	data << uint32(XP);
[/CODE]

[HR][/HR]
[HR][/HR]

/src/server/game/Entities/Player/Player.cpp

first add:
[CODE]
#include "Grumboz_VIP_Core.h"
[/CODE]

with the rest of the includes.


find function
[CODE]
void Player::RewardQuest(Quest const* quest, uint32 reward, Object* questGiver, bool announce)
[/CODE]

add at the top of the function:
[CODE]
[COLOR="#808080"]
	float VIP_OFFSET = VIP::GetVIPOFFSET();
	uint32 acctId = GetSession()->GetAccountId();
	uint8 Pvip = VIP::GetPlayerVIP(acctId);
	float MOD = (Pvip * VIP_OFFSET);

	Player* player = GetSession()->GetPlayer();
[/COLOR]
[/CODE]

then find:
[CODE]
                    SendNewItem(item, quest->RewardItemIdCount[i], true, false);
[/CODE]

and replace with:
[CODE]
					uint32 RewardItemCount = quest->RewardItemIdCount[i];

					SendNewItem(item, RewardItemCount + (RewardItemCount * MOD), true, false);
[/CODE]

then find:
[CODE]
    uint32 XP = rewarded && !quest->IsDFQuest() ? 0 : uint32(quest->XPValue(this)*sWorld->getRate(RATE_XP_QUEST));
[/CODE]

and replace with:
[CODE]
	uint32 XP = rewarded && !quest->IsDFQuest() ? 0 : uint32(quest->XPValue(this)*sWorld->getRate(RATE_XP_QUEST));
	XP = XP + (XP*MOD);
[/CODE]

then find:
[CODE]
	int32 moneyRew = 0;
[/CODE]
and replace with:
[CODE]
	int32 moneyRew = 0;
	uint32 reward_money = quest->GetRewMoneyMaxLevel();
	reward_money = reward_money + (reward_money * (sWorld->getRate(RATE_DROP_MONEY) + MOD));
[/CODE]

then find:
[CODE]
       moneyRew = int32(quest->GetRewMoneyMaxLevel() * sWorld->getRate(RATE_DROP_MONEY));
[/CODE]

and replace with:
[CODE]
		moneyRew = int32(reward_money);
[/CODE]

then find:
[CODE]
        moneyRew += quest->GetRewOrReqMoney();
[/CODE]

and replace with:
[CODE]
		moneyRew += int32(reward_money);
[/CODE]

then find:
[CODE]
    if (uint32 honor = quest->CalculateHonorGain(getLevel()))
        RewardHonor(NULL, 0, honor);
[/CODE]

and replace with:
[CODE]
	if (uint32 honor = quest->CalculateHonorGain(getLevel()))
	{
		honor = honor + (honor * MOD);
		RewardHonor(NULL, 0, honor);
	}
[/CODE]

then find:
[CODE]
    if (quest->GetRewArenaPoints())
        ModifyArenaPoints(quest->GetRewArenaPoints());
[/COLOR]
[/CODE]

and replace with:
[CODE]
	if (quest->GetRewArenaPoints())
	{
		int32 ArenaPoints = quest->GetRewArenaPoints();
		int32 RewardArenaPoints = ArenaPoints + (ArenaPoints * MOD);
		ModifyArenaPoints(RewardArenaPoints);
	}
[/CODE]

[HR][/HR]

find function:
[CODE]
void Player::SendQuestReward(Quest const* quest, uint32 XP)
[/CODE]

add at the top:
[CODE]
	float VIP_OFFSET = VIP::GetVIPOFFSET();
	uint32 acctId = GetSession()->GetAccountId();
	uint8 Pvip = VIP::GetPlayerVIP(acctId);
	float MOD = (Pvip * VIP_OFFSET);

	Player* player = GetSession()->GetPlayer();
[/CODE]

then find:
[CODE]
    if (getLevel() < sWorld->getIntConfig(CONFIG_MAX_PLAYER_LEVEL))
    {
        data << uint32(XP);
        data << uint32(quest->GetRewOrReqMoney());
    }
[/CODE]

and replace with:
[CODE]
	int32 RewMoney = quest->GetRewOrReqMoney();
	RewMoney = RewMoney + (RewMoney * MOD);
	XP = XP + (XP * MOD);

	if (getLevel() < sWorld->getIntConfig(CONFIG_MAX_PLAYER_LEVEL))
	{
		data << uint32(XP);

		data << uint32(RewMoney);
	}
[/CODE]

then find:
[CODE]
        data << uint32(quest->GetRewOrReqMoney() + int32(quest->GetRewMoneyMaxLevel() * sWorld->getRate(RATE_DROP_MONEY)));
[/CODE]

and replace with:
[CODE]
		float DropMoneyRate = sWorld->getRate(RATE_DROP_MONEY);
		DropMoneyRate = DropMoneyRate + (DropMoneyRate * MOD);

		data << uint32(RewMoney + int32(quest->GetRewMoneyMaxLevel() * DropMoneyRate));
[/CODE]

